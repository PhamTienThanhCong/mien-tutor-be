openapi: 3.0.0
info:
  title: TUTOR API documentation
  description: >-
    # üìÑ Get started here


    This template contains a boilerplate for documentation that you can quickly
    customize and reuse.


    ## üîñ How to use this template


    - Replace the content given brackets (()) with your API's details.
        
    - Tips are formatted in `codespan` - feel free to read and remove them.
        

    ---


    `Start with a brief overview of what your API offers.`


    The ((product name)) provides many API products, tools, and resources that
    enable you to ((add product value here)).


    `You can also list the APIs you offer, link to the relevant pages, or do
    both in this section.`


    ## **Getting started guide**


    `List the steps or points required to start using your APIs. Make sure to
    cover everything required to reach success with your API as quickly as
    possible.`


    To start using the ((add APIs here)), you need to -


    `The points given below are from The Postman API's documentation. You can
    reference it to write your own getting started guide.`


    - You must use a valid API Key to send requests to the API endpoints. You
    can get your API key from Postman's [integrations
    dashboard](https://go.postman.co/settings/me/api-keys).
        
    - The API has [rate and usage
    limits](https://learning.postman.com/docs/developer/postman-api/postman-api-rate-limits/).
        
    - The API only responds to HTTPS-secured communications. Any requests sent
    via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.
        
    - The API returns request responses in JSON format. When an API request
    returns an error, it is sent in the JSON response as an error key.
        

    ## Authentication


    `Add details on the authorization keys/tokens required, steps that cover how
    to get them, and the relevant error codes.`


    The ((product name)) API uses ((add your API's authorization type)) for
    authentication.


    `The details given below are from the Postman API's documentation. You can
    reference it to write your own authentication section.`


    Postman uses API keys for authentication. You can generate a Postman API key
    in the [API keys](https://postman.postman.co/settings/me/api-keys) section
    of your Postman account settings.


    You must include an API key in each request to the Postman API with the
    X-Api-Key request header.


    ### Authentication error response


    If an API key is missing, malformed, or invalid, you will receive an HTTP
    401 Unauthorized response code.


    ## Rate and usage limits


    `Use this section to cover your APIs' terms of use. Include API limits,
    constraints, and relevant error codes, so consumers understand the permitted
    API usage and practices.`


    `The example given below is from The Postman API's documentation. Use it as
    a reference to write your APIs' terms of use.`


    API access rate limits apply at a per-API key basis in unit time. The limit
    is 300 requests per minute. Also, depending on your plan, you may have usage
    limits. If you exceed either limit, your request will return an HTTP 429 Too
    Many Requests status code.


    Each API response returns the following set of headers to help you identify
    your use status:


    | Header | Description |

    | --- | --- |

    | `X-RateLimit-Limit` | The maximum number of requests that the consumer is
    permitted to make per minute. |

    | `X-RateLimit-Remaining` | The number of requests remaining in the current
    rate limit window. |

    | `X-RateLimit-Reset` | The time at which the current rate limit window
    resets in UTC epoch seconds. |


    ### 503 response


    An HTTP `503` response from our servers indicates there is an unexpected
    spike in API access traffic. The server is usually operational within the
    next five minutes. If the outage persists or you receive any other form of
    an HTTP `5XX` error, [contact
    support](https://support.postman.com/hc/en-us/requests/new/).


    ### **Need some help?**


    `Add links that customers can refer to whenever they need help.`


    In case you have questions, go through our tutorials ((link to your video or
    help documentation here)). Or visit our FAQ page ((link to the relevant
    page)).


    Or you can check out our community forum, there‚Äôs a good chance our
    community has an answer for you. Visit our developer forum ((link to
    developer forum)) to review topics, ask questions, and learn from others.


    `You can also document or add links to libraries, code examples, and other
    resources needed to make a request.`
  version: 1.0.0
servers:
  - url: https://api.onllearning.edu.vn/
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    apikeyAuth:
      type: http
      scheme: apikey
security:
  - apikeyAuth: []
tags:
  - name: users
    description: >-
      ### **Base URL**:


      - `https://your-api-endpoint.com`
          

      ---


      ## **1\. API ƒêƒÉng nh·∫≠p**


      **Endpoint**: `/api/login`  

      **Method**: `POST`  

      **M√¥ t·∫£**: API n√†y cho ph√©p ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p b·∫±ng c√°ch cung c·∫•p email
      v√† m·∫≠t kh·∫©u.


      ### Y√™u c·∫ßu (Request):


      **Request Body**:


      ``` json

      {
        "email": "string",    // Email c·ªßa ng∆∞·ªùi d√πng
        "password": "string"  // M·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng
      }

       ```

      ### Ph·∫£n h·ªìi (Response):


      - **200 OK**: ƒêƒÉng nh·∫≠p th√†nh c√¥ng.
          
          ``` json
                      {
                        "id": "number",       // ID ng∆∞·ªùi d√πng
                        "email": "string",    // Email ng∆∞·ªùi d√πng
                        "username": "string", // T√™n ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
                        "role": "string",     // Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
                        "is_active": "boolean"// Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
                      }
          
           ```
          
      - **400 Bad Request**: Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.
          
          ``` json
                      {
                        "error": "string" // Th√¥ng b√°o l·ªói
                      }
          
           ```
          

      ---


      ## **2\. API Xem h·ªì s∆° ng∆∞·ªùi d√πng qua ID**


      **Endpoint**: `/api/users/[userId]`  

      **Method**: `GET`  

      **M√¥ t·∫£**: API n√†y cho ph√©p l·∫•y th√¥ng tin h·ªì s∆° ng∆∞·ªùi d√πng d·ª±a tr√™n
      `userId`.


      ### Tham s·ªë (Parameters):


      - **URL Parameter**: `userId` - ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y th√¥ng tin.
          

      ### Ph·∫£n h·ªìi (Response):


      - { "id": "number", // ID ng∆∞·ªùi d√πng "username": "string", // T√™n ƒëƒÉng
      nh·∫≠p c·ªßa ng∆∞·ªùi d√πng "email": "string", // Email ng∆∞·ªùi d√πng "role":
      "string", // Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng "is_active": "boolean", // Tr·∫°ng th√°i
      ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng "profile": { "address": "string", // ƒê·ªãa ch·ªâ
      ng∆∞·ªùi d√πng "avatar": "string", // H√¨nh ƒë·∫°i di·ªán "gender": "string", //
      Gi·ªõi t√≠nh "cccd": "string", // S·ªë CCCD "introduction": "string",// Gi·ªõi
      thi·ªáu v·ªÅ b·∫£n th√¢n "job": "string", // C√¥ng vi·ªác "full_name": "string", //
      T√™n ƒë·∫ßy ƒë·ªß "phone": "string" // S·ªë ƒëi·ªán tho·∫°i } }
          
      - **404 Not Found**: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.
          
          ``` json
                      {
                        "error": "string" // Th√¥ng b√°o l·ªói
                      }
          
           ```
          

      ---


      ## **3\. API Xem th√¥ng tin t√†i kho·∫£n**


      **Endpoint**: `/api/me`  

      **Method**: `GET`  

      **M√¥ t·∫£**: API n√†y cho ph√©p xem th√¥ng tin t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng
      nh·∫≠p.


      ### Y√™u c·∫ßu (Request):


      - **Header**:
          - `Authorization: Bearer`
              

      ### Ph·∫£n h·ªìi (Response):


      - **200 OK**: Th√¥ng tin t√†i kho·∫£n ƒë∆∞·ª£c tr·∫£ v·ªÅ.
          
          ``` json
                      {
                        "id": "number",       // ID ng∆∞·ªùi d√πng
                        "username": "string", // T√™n ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
                        "email": "string",    // Email ng∆∞·ªùi d√πng
                        "role": "string",     // Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
                        "is_active": "boolean"// Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
                      }
          
           ```
          
      - **401 Unauthorized**: N·∫øu token kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu.
          
          ``` json
                      {
                        "error": "Unauthorized"
                      }
          
           ```
          

      ---


      ## **4\. API C·∫≠p nh·∫≠t h·ªì s∆° ng∆∞·ªùi d√πng**


      **Endpoint**: `/api/users/[username]`  

      **Method**: `PUT`  

      **M√¥ t·∫£**: API n√†y cho ph√©p c·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° c·ªßa ng∆∞·ªùi d√πng.


      ### Y√™u c·∫ßu (Request):


      **Request Body**:


      ``` json

      {
        "role": "string",          // Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
        "is_active": "boolean",    // Tr·∫°ng th√°i ho·∫°t ƒë·ªông
        "address": "string",       // ƒê·ªãa ch·ªâ
        "avatar": "string",        // H√¨nh ƒë·∫°i di·ªán
        "gender": "string",        // Gi·ªõi t√≠nh
        "cccd": "string",          // CCCD
        "introduction": "string",  // Gi·ªõi thi·ªáu
        "job": "string",           // Ngh·ªÅ nghi·ªáp
        "full_name": "string",     // T√™n ƒë·∫ßy ƒë·ªß
        "phone": "string",         // S·ªë ƒëi·ªán tho·∫°i
        "password": "string"       // M·∫≠t kh·∫©u m·ªõi
      }

       ```

      ### Ph·∫£n h·ªìi (Response):


      - { "message": "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng" }
          
      - **500 Internal Server Error**: C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t.
          
          ``` json
                      {
                        "error": "string" // Th√¥ng b√°o l·ªói
                      }
          
           ```
          

      StartFragment


      ## **5\. API Xem th√¥ng tin t√†i kho·∫£n hi·ªán t·∫°i**


      **Endpoint**: `/api/me`  

      **Method**: `GET`  

      **M√¥ t·∫£**: API n√†y cho ph√©p l·∫•y th√¥ng tin t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng hi·ªán
      t·∫°i d·ª±a tr√™n token x√°c th·ª±c (Bearer token).


      ### Y√™u c·∫ßu (Request):


      **Header**:


      - `Authorization: Bearer`
          

      ### Ph·∫£n h·ªìi (Response):


      ``` json

      {  
        "id": "number", // ID ng∆∞·ªùi d√πng  
        "username": "string", // T√™n ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng  
        "email": "string", // Email ng∆∞·ªùi d√πng  
        "role": "string", // Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng  
        "is_active": "boolean"// Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng  
      }

       ```

      { "error": "Unauthorized" // Th√¥ng b√°o l·ªói x√°c th·ª±c}


      API n√†y y√™u c·∫ßu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p v√† g·ª≠i token x√°c th·ª±c th√¥ng qua
      header `Authorization`. B·∫°n c√≥ th·ªÉ d√πng n√≥ ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      hi·ªán t·∫°i m√† kh√¥ng c·∫ßn cung c·∫•p `userId` ho·∫∑c `username`.
  - name: Comments
    description: >-
      ## 1\. **POST /api/comment**


      ### **Description:**


      API n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ g·ª≠i m·ªôt nh·∫≠n x√©t m·ªõi d√†nh cho m·ªôt ng∆∞·ªùi d√πng.


      ### **Request:**


      - **Method:** `POST`
          
      - **URL:** `/api/comment`
          
      - **Headers:**
          
          - `Content-Type: application/json`
              
          
      - **Request Body:**
          

      ``` json

      {  
        "username_voted": "string", // Ng∆∞·ªùi ƒë∆∞·ª£c nh·∫≠n x√©t  
        "comment": "string" // N·ªôi dung nh·∫≠n x√©t  
      }  

       ```

      ## 2\. **GET /api/comments/{userName}**


      ### **Description:**


      API n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l·∫•y danh s√°ch t·∫•t c·∫£ c√°c nh·∫≠n x√©t d√†nh cho m·ªôt
      ng∆∞·ªùi d√πng c·ª• th·ªÉ (d·ª±a tr√™n `username` l√† `username_voted`).


      ### **Request:**


      - **Method:** `GET`
          
      - **URL:** `/api/comments/{username}`
          

      ### **Response:**


      - **Status Code:** `200 OK`
          
      - **Response Body:**
          

      ``` json

      [
        {
          "id": 1,
          "username_voted": "user123",
          "username": "voter456",
          "comment": "Great job!",
          "vote_up": 10,
          "vote_down": 1
        },
        {
          "id": 2,
          "username_voted": "user123",
          "username": "voter789",
          "comment": "Needs improvement.",
          "vote_up": 5,
          "vote_down": 3
        }
      ]

       ```
  - name: Class Requests(yeu cau mo lop)
  - name: Class Requests(yeu cau mo lop) > nh·∫≠n l·ªõp
paths:
  /users:
    post:
      tags:
        - users
      summary: create a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: cong test
                email: cong@example.com
                password: TestPassword123
                role: student
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/testuser:
    get:
      tags:
        - users
      summary: get info user
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - users
      summary: update user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                role: teacher
                is_active: true
                address: 456 Updated S asdt
                avatar: updatedavatar.png
                gender: female
                cccd: '9876543210'
                introduction: This is an updated √°d
                job: Lecturer
                full_name: Updated User
                phone: '0987654321'
                password: UpdatedPassword123
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/login:
    post:
      tags:
        - users
      summary: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: testuser@example.com
                password: UpdatedPassword123
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/me:
    get:
      tags:
        - users
      summary: get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /comments:
    post:
      tags:
        - Comments
      summary: handle comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username_voted: testuser
                comment: This is a sample comment 2
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /comments/testuser:
    get:
      tags:
        - Comments
      summary: New Request
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /class-requests/2/yeu-cau:
    post:
      tags:
        - Class Requests(yeu cau mo lop) > nh·∫≠n l·ªõp
      summary: yeu c·∫ßu nh·∫≠n l·ªõp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: testuser12
                total_price: 50000
                description: This is a class for high school students.
                plan: Weekly lessons
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Class Requests(yeu cau mo lop) > nh·∫≠n l·ªõp
      summary: Danh s√°ch y√™u c·∫ßu
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /class-requests/1/yeu-cau:
    delete:
      tags:
        - Class Requests(yeu cau mo lop) > nh·∫≠n l·ªõp
      summary: X√≥a y√™u c·∫ßu
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /class-requests:
    post:
      tags:
        - Class Requests(yeu cau mo lop)
      summary: Create classroom
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 1
                username: testuser12
                subject: Ng·ªØ vƒÉn
                address: 123 Street A
                total_price: 200000
                time: '2024-10-20T09:00:00Z'
                note: YC nh√¢n vi√™n Nam
                due_date: '2024-10-19'
                status: pending
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Class Requests(yeu cau mo lop)
      summary: List classroom
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /class-requests/1:
    get:
      tags:
        - Class Requests(yeu cau mo lop)
      summary: Xem chi ti·∫øt l·ªõp
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Class Requests(yeu cau mo lop)
      summary: C·∫≠p nh·∫≠p l·ªõp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                subject: English
                address: 789 Street C
                total_price: 250000
                time: '2024-09-25T10:00:00Z'
                note: Afternoon class
                due_date: '2024-09-24'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /heart:
    get:
      tags:
        - default
      summary: test
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
